// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Produ_project.Enitity;

#nullable disable

namespace Produ_project.Migrations
{
    [DbContext(typeof(Produ_projectContext))]
    [Migration("20240203030009_AddTable")]
    partial class AddTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Produ_project.Enitity.ArtWork", b =>
                {
                    b.Property<string>("Awid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AWID");

                    b.Property<string>("ImgagesUrl")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MainProductId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MainProductID");

                    b.Property<string>("NameAw")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NameAW");

                    b.HasKey("Awid")
                        .HasName("PK__ArtWork__07CE6A4C6351BBC9");

                    b.HasIndex("MainProductId");

                    b.ToTable("ArtWork", (string)null);
                });

            modelBuilder.Entity("Produ_project.Enitity.Category", b =>
                {
                    b.Property<string>("CategoriesId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CategoriesID");

                    b.Property<string>("NameCategories")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CategoriesId")
                        .HasName("PK__Categori__EFF907B040C2A572");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Produ_project.Enitity.MainProduct", b =>
                {
                    b.Property<string>("MainProductId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MainProductID");

                    b.Property<string>("CategoriesId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CategoriesID");

                    b.Property<string>("NameMp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NameMP");

                    b.HasKey("MainProductId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("MainProduct", (string)null);
                });

            modelBuilder.Entity("Produ_project.Enitity.Quality", b =>
                {
                    b.Property<string>("Awid")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("AWID");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("Pcscustomer")
                        .HasColumnType("int")
                        .HasColumnName("PCScustomer");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("size");

                    b.HasKey("Awid")
                        .HasName("PK__Quality__07CE6A4CD218F140");

                    b.ToTable("Quality", (string)null);
                });

            modelBuilder.Entity("Produ_project.Enitity.SupplierInFo", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Address_");

                    b.Property<string>("CategoriesId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CategoriesID");

                    b.Property<string>("Certificate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Certificate_");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Customized")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("DateQa")
                        .HasColumnType("datetime")
                        .HasColumnName("DateQA");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("EstablishedYear")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("ExportUs")
                        .HasColumnType("bit")
                        .HasColumnName("ExportUS");

                    b.Property<string>("Leadtime")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MainProductId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MainProductID");

                    b.Property<string>("Moq")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("MOQ");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("Numberofworkers")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<bool?>("ReviewQa")
                        .HasColumnType("bit")
                        .HasColumnName("ReviewQA");

                    b.Property<string>("SampleProcess")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SlId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SlID");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("UserID");

                    b.Property<string>("Websitelink")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasIndex("CategoriesId");

                    b.HasIndex("MainProductId");

                    b.HasIndex("UserId");

                    b.ToTable("SupplierInFo", (string)null);
                });

            modelBuilder.Entity("Produ_project.Enitity.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("UserID");

                    b.Property<string>("NameUser")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Password_");

                    b.Property<bool?>("Role")
                        .HasColumnType("bit")
                        .HasColumnName("Role_");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Produ_project.Secure.Data.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("JwtID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaAccount")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaAccount");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Produ_project.Enitity.ArtWork", b =>
                {
                    b.HasOne("Produ_project.Enitity.MainProduct", "MainProduct")
                        .WithMany("ArtWorks")
                        .HasForeignKey("MainProductId")
                        .HasConstraintName("FK__ArtWork__MainPro__3C69FB99");

                    b.Navigation("MainProduct");
                });

            modelBuilder.Entity("Produ_project.Enitity.MainProduct", b =>
                {
                    b.HasOne("Produ_project.Enitity.Category", "Categories")
                        .WithMany("MainProducts")
                        .HasForeignKey("CategoriesId")
                        .HasConstraintName("FK__MainProdu__Categ__398D8EEE");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Produ_project.Enitity.Quality", b =>
                {
                    b.HasOne("Produ_project.Enitity.ArtWork", "Aw")
                        .WithOne("Quality")
                        .HasForeignKey("Produ_project.Enitity.Quality", "Awid")
                        .IsRequired()
                        .HasConstraintName("FK__Quality__AWID__3F466844");

                    b.Navigation("Aw");
                });

            modelBuilder.Entity("Produ_project.Enitity.SupplierInFo", b =>
                {
                    b.HasOne("Produ_project.Enitity.Category", "Categories")
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .HasConstraintName("FK__SupplierI__Categ__4316F928");

                    b.HasOne("Produ_project.Enitity.MainProduct", "MainProduct")
                        .WithMany()
                        .HasForeignKey("MainProductId")
                        .HasConstraintName("FK__SupplierI__MainP__440B1D61");

                    b.HasOne("Produ_project.Enitity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__SupplierI__UserI__44FF419A");

                    b.Navigation("Categories");

                    b.Navigation("MainProduct");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Produ_project.Secure.Data.RefreshToken", b =>
                {
                    b.HasOne("Produ_project.Enitity.User", "user")
                        .WithMany()
                        .HasForeignKey("MaAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Produ_project.Enitity.ArtWork", b =>
                {
                    b.Navigation("Quality");
                });

            modelBuilder.Entity("Produ_project.Enitity.Category", b =>
                {
                    b.Navigation("MainProducts");
                });

            modelBuilder.Entity("Produ_project.Enitity.MainProduct", b =>
                {
                    b.Navigation("ArtWorks");
                });
#pragma warning restore 612, 618
        }
    }
}
